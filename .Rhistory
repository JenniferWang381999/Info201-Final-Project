source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(string_two, "z")
if (occ_first > occ_second) {
answer <- paste(string_one, "has", occ_first, "occurrences of the
letter 'z'")
} else if (occ_second > occ_first) {
answer <- paste(string_two, "has", occ_second, "occurrences of the
letter 'z'")
} else {
answer <- "The strings have the same number of Zs"
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Hi", "Hello"))
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(string_two, "z")
if (occ_first > occ_second) {
answer <- paste(string_one, "has", occ_first, "occurrences of the
letter 'z'")
} else if (occ_second > occ_first) {
answer <- paste(string_two, "has", occ_second, "occurrences of the
letter 'z'")
} else {
answer <- "The strings have the same number of Zs"
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Zi", "Hello"))
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(string_two, "z")
if (occ_first > occ_second) {
answer <- paste(string_one, "has", occ_first, "occurrences of the
letter 'z'")
} else if (occ_second > occ_first) {
answer <- paste(string_two, "has", occ_second, "occurrences of the
letter 'z'")
} else {
answer <- "The strings have the same number of Zs"
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Zi", "Zello"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(string_two, "z")
if (occ_first > occ_second) {
answer <- "ok"
} else if (occ_second > occ_first) {
answer <- paste(string_two, "has", occ_second, "occurrences of the
letter 'z'")
} else {
answer <- "yo"
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Zi", "Zezllo"))
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(string_two, "z")
if (occ_first > occ_second) {
answer <- "ok"
} else if (occ_second > occ_first) {
answer <- "second"
} else {
answer <- "yo"
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Zi", "Zezllo"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(string_two, "z")
if (occ_first > occ_second) {
answer <- "ok"
} else if (occ_second > occ_first) {
answer <- "second"
} else {
answer <- "yo"
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Zi", "Zezzllo"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
print(occ_first)
occ_second <- str_count(string_two, "z")
print(occ_second)
if (occ_first > occ_second) {
answer <- "ok"
} else if (occ_second > occ_first) {
answer <- "second"
} else {
answer <- "yo"
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Zi", "Zezzllo"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
print(occ_first)
occ_second <- str_count(second, "z")
print(occ_second)
if (occ_first > occ_second) {
answer <- "ok"
} else if (occ_second > occ_first) {
answer <- "second"
} else {
answer <- "yo"
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Zi", "Zezzllo"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(second, "z")
if (occ_first > occ_second) {
answer <- paste("The first string has more occurances of 'z':", occ_first)
} else if (occ_second > occ_first) {
answer <- "second"
} else {
answer <- paste("The second string has more occurances of 'z':",
occ_second)
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Zi", "Zezzllo"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(second, "z")
if (occ_first > occ_second) {
answer <- paste("The first string has more occurances of 'z':", occ_first)
} else if (occ_second > occ_first) {
answer <- paste("The second string has more occurances of 'z':",
occ_second)
} else {
answer <- "The strings have the same number of Zs."
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Zi", "Zezzllo"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(second, "z")
if (occ_first > occ_second) {
answer <- paste("The first string has more occurances of 'z':", occ_first)
} else if (occ_second > occ_first) {
answer <- paste("The second string has more occurances of 'z':",
occ_second)
} else {
answer <- "The strings have the same number of Zs."
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("hi", "hello"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(second, "z")
if (occ_first > occ_second) {
answer <- paste("The first string has more occurances of 'z':", occ_first)
} else if (occ_second > occ_first) {
answer <- paste("The second string has more occurances of 'z':",
occ_second)
} else {
answer <- "The strings have the same number of Zs."
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("zi", "hello"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(second, "z")
if (occ_first > occ_second) {
answer <- paste("The first string has more occurances of 'z':", occ_first)
} else if (occ_second > occ_first) {
answer <- paste("The second string has more occurances of 'z':",
occ_second)
} else {
answer <- "The strings have the same number of Zs."
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("hi", "zello"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(second, "z")
if (occ_first > occ_second) {
answer <- paste("The first string has more occurances of 'z':", occ_first)
} else if (occ_second > occ_first) {
answer <- paste("The second string has more occurances of 'z':",
occ_second)
} else {
answer <- "The strings have the same number of Zs."
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("daze", "buzz"))
has_more_zs <- function(string_one, string_two) {
# Converts strings to lowercase letters
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(second, "z")
if (occ_first > occ_second) {
answer <- paste("The first string has more occurances of 'z':", occ_first)
} else if (occ_second > occ_first) {
answer <- paste("The second string has more occurances of 'z':",
occ_second)
} else {
answer <- "The strings have the same number of Zs."
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
# Creates a variable `more_zs` by passing two strings to the `has_more_zs`
# function
print(has_more_zs("daze", "buzZ"))
has_more_zs <- function(string_one, string_two) {
# Converts strings to lowercase letters
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
# If the string contains Zs, it will follow this procedure.
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
# Stores # of occurrences of Zs as variables
occ_first <- str_count(first, "z")
occ_second <- str_count(second, "z")
# If first string has more Zs,
if (occ_first > occ_second) {
answer <- paste("The first string has more occurances of 'z':", occ_first)
# If second string has more Zs
} else if (occ_second > occ_first) {
answer <- paste("The second string has more occurances of 'z':",
occ_second)
# If both strings have same number of Zs
} else {
answer <- "The strings have the same number of Zs."
}
# If the string doesn't contain "z", it will follow this procedure.
} else {
answer <- "Neither string contains the letter z."
}
# Returns the answer variable
return(answer)
}
# Creates a variable `more_zs` by passing two strings to the `has_more_zs`
# function
print(has_more_zs("daze", "buzZ"))
remove_digits <- function(name) {
string <- str_remove(name, "[0123456789]")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("INFO 201"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- str_remove(name, "[0123456789]")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("INFO201"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- str_remove(name, "[0123456789]")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("INFO 201"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- str_remove(name, "[0123456789]")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("INFO 142"))
# Creates a variable `more_zs` by passing two strings to the `has_more_zs`
# function
print(has_more_zs("daze", "buzZ"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- str_remove(name, "[0123456789]")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("INFO 123"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- str_remove(name, "0123456789")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("INFO 201"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- name.replaceALL("\\d", "")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("INFO 201"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- name.replaceAll("\\d", "")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("INFO 201"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- str_remove_all(name, "[0123456789]")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("INFO 201"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- str_remove_all(name, "[0123456789]")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("CSE 142"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- str_remove_all(name, "[0123456789]")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- str_remove_all(name, "[0123456789 ]")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
summary_info <- list(
length = numbers_len,
mean = numbers_mean,
median = numbers_median
)
# A function that takes in a vector of numbers, and returns a list of summary
# information about that vector (including the mean, median, and length)
summarize_vector <- function(nums) {
summary_info$length <- length(nums)
summary_info$mean <- mean(nums)
summary_info$median <- median(nums)
return(summary_info)
}
# Creates a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to `summarize_vector` function
summary_1_to_100 <- summarize_vector(1:100)
print(summary_1_to_100)
lintr:::addin_lint()
lintr:::addin_lint_package()
lintr:::addin_lint_package()
lintr:::addin_lint_package()
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
lintr:::addin_lint()
lintr:::addin_lint_package()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
source('C:/Users/israe/Desktop/a5-b-israelma/analysis.R', echo=TRUE)
source('C:/Users/israe/Desktop/Info201-Final-Project/bar_graph.R', echo=TRUE)
setwd("C:/Users/israe/Desktop/Info201-Final-Project")
source('C:/Users/israe/Desktop/Info201-Final-Project/bar_graph.R', echo=TRUE)
source('C:/Users/israe/Desktop/Info201-Final-Project/bar_graph.R', echo=TRUE)
source('C:/Users/israe/Desktop/Info201-Final-Project/bar_graph.R', echo=TRUE)
source('C:/Users/israe/Desktop/Info201-Final-Project/bar_graph.R', echo=TRUE)
source('C:/Users/israe/Desktop/Info201-Final-Project/bar_graph.R', echo=TRUE)
avg_means <- read.csv("data/seattle_apt_2015_2019.csv", stringsAsFactors = FALSE)
View(avg_means)
source('C:/Users/israe/Desktop/Info201-Final-Project/bar_graph.R', echo=TRUE)
source('C:/Users/israe/Desktop/Info201-Final-Project/bar_graph.R', echo=TRUE)
source('C:/Users/israe/Desktop/Info201-Final-Project/bar_graph.R', echo=TRUE)
source('C:/Users/israe/Desktop/Info201-Final-Project/bar_graph.R', echo=TRUE)
source('C:/Users/israe/Desktop/Info201-Final-Project/bar_graph.R', echo=TRUE)
source('C:/Users/israe/Desktop/Info201-Final-Project/bar_graph.R', echo=TRUE)
install.packages("reshape2")
install.packages("reshape2")
bar_graph <- avg_means %>%
mutate(id = factor(row.names())) %>%
print()
bar_graph <- avg_means %>%
mutate(id = factor(row.names())) %>%
print()
source('C:/Users/israe/Desktop/Info201-Final-Project/bar_graph.R', echo=TRUE)
