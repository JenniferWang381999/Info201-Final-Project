<<<<<<< HEAD
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(string_two, "z")
if (occ_first > occ_second) {
answer <- paste(string_one, "has", occ_first, "occurrences of the
letter 'z'")
} else if (occ_second > occ_first) {
answer <- paste(string_two, "has", occ_second, "occurrences of the
letter 'z'")
} else {
answer <- "The strings have the same number of Zs"
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Hi", "Hello"))
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(string_two, "z")
if (occ_first > occ_second) {
answer <- paste(string_one, "has", occ_first, "occurrences of the
letter 'z'")
} else if (occ_second > occ_first) {
answer <- paste(string_two, "has", occ_second, "occurrences of the
letter 'z'")
} else {
answer <- "The strings have the same number of Zs"
}
} else {
answer <- "Neither string contains the letter z."
=======
multiples_of_4 <- c((1:100)*4)
print(multiples_of_4[100])
multiples_of_4 <- c((1:100)*4)
print(multiples_of_4[35])
multiples_of_8 <- c(
for(i in 1 : length(multiples_of_4))
if(multiples_of_4 %% 8 == 0) {
multiples_of_8[i] <- multiples_of_4[i]
}
)
warnings()
multiples_of_4 <- c((1:100)*4)
print(multiples_of_4[35])
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
multiples_of_8 <- c(
for(i in 1 : length(multiples_of_4))
if(multiples_of_4 %% 8 == 0) {
multiples_of_8[i] <- multiples_of_4[i]
}
)
v1 <- c(1, 2, 3)
v2 <- c(100, 200, 300, 400, 500, 600, 700, 800, 900, 1000)
v3 <- v1 + v2
print(v3)
multiples_of_8 <- c()
for(i in 1:length(multiples_of_4)){
if (multiples_of_4 %% 8 == 0) {
multiples_of_8 <- c(multiples_of_8, divisible_by_8)
}
}
multiples_of_8 <- c()
for(i in 1:length(multiples_of_4)){
if (multiples_of_4[i] %% 8 == 0) {
multiples_of_8 <- c(multiples_of_8, multiples_of_4[i])
}
}
print(length(multiples_of_8))
print(length(multiples_of_8))
print(multiples_of_8[50])
numbers <- c(700:999)
numbers_len <- length(numbers)
numbers_mean <- mean(numbers)
numbers_median <- median(numbers)
lower_numbers <- numbers[ numbers < numbers_mean ]
higher_numbesr <- numbers[ numbers > numbers_mean ]
remove_digits <- function(c){
c[c == (0|1|2|3|4|5|6|7|8|9)] <- string_remove_all(c)
return(c)
}
print(remove_digits(c("INFO 201", "cse 142")))
summary_info <- list(
length = length(numbers),
mean = numbers_mean,
median = numbers_median
)
View(summary_info)
summary_info <- list(
length = length(numbers),
mean = mean(numbers),
median = median(numbers)
)
View(summary_info)
summary_1_to_100 <- summarize_vector(1:100)
summary_info <- list(
length = length(numbers),
mean = mean(numbers),
median = median(numbers)
)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- function(vector_of_num){
return(summary_info(vector_of_num))
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(1:100)
summarize_vector <- function(vector_of_num){
summary_info_given_vector <- list (
length = length(vector_of_num),
mean = mean(vector_of_num),
median = median(vector_of_num)
)
return(summary_info_given_vector)
>>>>>>> 2cccc61cd0e3770e320ac1a9b3706fa13cb8bbbc
}
return(answer)
}
print(has_more_zs("Zi", "Hello"))
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(string_two, "z")
if (occ_first > occ_second) {
answer <- paste(string_one, "has", occ_first, "occurrences of the
letter 'z'")
} else if (occ_second > occ_first) {
answer <- paste(string_two, "has", occ_second, "occurrences of the
letter 'z'")
} else {
answer <- "The strings have the same number of Zs"
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Zi", "Zello"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(string_two, "z")
if (occ_first > occ_second) {
answer <- "ok"
} else if (occ_second > occ_first) {
answer <- paste(string_two, "has", occ_second, "occurrences of the
letter 'z'")
} else {
answer <- "yo"
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Zi", "Zezllo"))
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(string_two, "z")
if (occ_first > occ_second) {
answer <- "ok"
} else if (occ_second > occ_first) {
answer <- "second"
} else {
answer <- "yo"
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Zi", "Zezllo"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(string_two, "z")
if (occ_first > occ_second) {
answer <- "ok"
} else if (occ_second > occ_first) {
answer <- "second"
} else {
answer <- "yo"
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Zi", "Zezzllo"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
print(occ_first)
occ_second <- str_count(string_two, "z")
print(occ_second)
if (occ_first > occ_second) {
answer <- "ok"
} else if (occ_second > occ_first) {
answer <- "second"
} else {
answer <- "yo"
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Zi", "Zezzllo"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
print(occ_first)
occ_second <- str_count(second, "z")
print(occ_second)
if (occ_first > occ_second) {
answer <- "ok"
} else if (occ_second > occ_first) {
answer <- "second"
} else {
answer <- "yo"
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Zi", "Zezzllo"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(second, "z")
if (occ_first > occ_second) {
answer <- paste("The first string has more occurances of 'z':", occ_first)
} else if (occ_second > occ_first) {
answer <- "second"
} else {
answer <- paste("The second string has more occurances of 'z':",
occ_second)
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Zi", "Zezzllo"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(second, "z")
if (occ_first > occ_second) {
answer <- paste("The first string has more occurances of 'z':", occ_first)
} else if (occ_second > occ_first) {
answer <- paste("The second string has more occurances of 'z':",
occ_second)
} else {
answer <- "The strings have the same number of Zs."
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("Zi", "Zezzllo"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(second, "z")
if (occ_first > occ_second) {
answer <- paste("The first string has more occurances of 'z':", occ_first)
} else if (occ_second > occ_first) {
answer <- paste("The second string has more occurances of 'z':",
occ_second)
} else {
answer <- "The strings have the same number of Zs."
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("hi", "hello"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(second, "z")
if (occ_first > occ_second) {
answer <- paste("The first string has more occurances of 'z':", occ_first)
} else if (occ_second > occ_first) {
answer <- paste("The second string has more occurances of 'z':",
occ_second)
} else {
answer <- "The strings have the same number of Zs."
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("zi", "hello"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(second, "z")
if (occ_first > occ_second) {
answer <- paste("The first string has more occurances of 'z':", occ_first)
} else if (occ_second > occ_first) {
answer <- paste("The second string has more occurances of 'z':",
occ_second)
} else {
answer <- "The strings have the same number of Zs."
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("hi", "zello"))
has_more_zs <- function(string_one, string_two) {
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(second, "z")
if (occ_first > occ_second) {
answer <- paste("The first string has more occurances of 'z':", occ_first)
} else if (occ_second > occ_first) {
answer <- paste("The second string has more occurances of 'z':",
occ_second)
} else {
answer <- "The strings have the same number of Zs."
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
print(has_more_zs("daze", "buzz"))
has_more_zs <- function(string_one, string_two) {
# Converts strings to lowercase letters
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
occ_first <- str_count(first, "z")
occ_second <- str_count(second, "z")
if (occ_first > occ_second) {
answer <- paste("The first string has more occurances of 'z':", occ_first)
} else if (occ_second > occ_first) {
answer <- paste("The second string has more occurances of 'z':",
occ_second)
} else {
answer <- "The strings have the same number of Zs."
}
} else {
answer <- "Neither string contains the letter z."
}
return(answer)
}
# Creates a variable `more_zs` by passing two strings to the `has_more_zs`
# function
print(has_more_zs("daze", "buzZ"))
has_more_zs <- function(string_one, string_two) {
# Converts strings to lowercase letters
first <- str_to_lower(string_one)
second <- str_to_lower(string_two)
# If the string contains Zs, it will follow this procedure.
if (str_detect(first, "z") == TRUE || str_detect(second, "z") == TRUE) {
# Stores # of occurrences of Zs as variables
occ_first <- str_count(first, "z")
occ_second <- str_count(second, "z")
# If first string has more Zs,
if (occ_first > occ_second) {
answer <- paste("The first string has more occurances of 'z':", occ_first)
# If second string has more Zs
} else if (occ_second > occ_first) {
answer <- paste("The second string has more occurances of 'z':",
occ_second)
# If both strings have same number of Zs
} else {
answer <- "The strings have the same number of Zs."
}
# If the string doesn't contain "z", it will follow this procedure.
} else {
answer <- "Neither string contains the letter z."
}
# Returns the answer variable
return(answer)
}
# Creates a variable `more_zs` by passing two strings to the `has_more_zs`
# function
print(has_more_zs("daze", "buzZ"))
remove_digits <- function(name) {
string <- str_remove(name, "[0123456789]")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("INFO 201"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- str_remove(name, "[0123456789]")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("INFO201"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- str_remove(name, "[0123456789]")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("INFO 201"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- str_remove(name, "[0123456789]")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("INFO 142"))
# Creates a variable `more_zs` by passing two strings to the `has_more_zs`
# function
print(has_more_zs("daze", "buzZ"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- str_remove(name, "[0123456789]")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("INFO 123"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- str_remove(name, "0123456789")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("INFO 201"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- name.replaceALL("\\d", "")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("INFO 201"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- name.replaceAll("\\d", "")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("INFO 201"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- str_remove_all(name, "[0123456789]")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("INFO 201"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- str_remove_all(name, "[0123456789]")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits("CSE 142"))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- str_remove_all(name, "[0123456789]")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(name) {
string <- str_remove_all(name, "[0123456789 ]")
return(string)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "CSE 142")))
summary_info <- list(
length = numbers_len,
mean = numbers_mean,
median = numbers_median
)
# A function that takes in a vector of numbers, and returns a list of summary
# information about that vector (including the mean, median, and length)
summarize_vector <- function(nums) {
summary_info$length <- length(nums)
summary_info$mean <- mean(nums)
summary_info$median <- median(nums)
return(summary_info)
}
# Creates a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to `summarize_vector` function
summary_1_to_100 <- summarize_vector(1:100)
<<<<<<< HEAD
print(summary_1_to_100)
lintr:::addin_lint()
lintr:::addin_lint_package()
lintr:::addin_lint_package()
lintr:::addin_lint_package()
source('C:/Users/israe/Desktop/a2-israelma/assignment.R', echo=TRUE)
lintr:::addin_lint()
lintr:::addin_lint_package()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
source('C:/Users/israe/Desktop/a5-b-israelma/analysis.R', echo=TRUE)
source('C:/Users/israe/Desktop/Info201-Final-Project/bar_graph.R', echo=TRUE)
shiny::runApp('C:/Users/israe/Desktop/Info201-Final-Project')
runApp('C:/Users/israe/Desktop/Info201-Final-Project')
setwd("C:/Users/israe/Desktop/Info201-Final-Project")
runApp()
runApp()
source('C:/Users/israe/Desktop/Info201-Final-Project/average_means_graph.R', echo=TRUE)
runApp()
runApp()
runApp()
=======
shiny::runApp('Desktop/GitFolder/Info201-Final-Project')
shiny::runApp('Desktop/GitFolder/Info201-Final-Project')
runApp('Desktop/GitFolder/Info201-Final-Project')
setwd("~/Desktop/GitFolder/Info201-Final-Project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/GitFolder/a7--JinSon12')
runApp('~/Desktop/GitFolder/a7--JinSon12')
runApp('~/Desktop/GitFolder/a7--JinSon12')
runApp()
print(api_key) # the key is now available!
setwd("~/Desktop/GitFolder/a7--JinSon12")
print(api_key)
print(api_key)
api_key <- "6AfvSpYrMXjDRgHvb0PkuRbbGdbJlBsiBvtqSOl9"
print(api_key)
runApp('~/Desktop/GitFolder/Info201-Final-Project')
setwd("~/Desktop/GitFolder/Info201-Final-Project")
setwd("~/Desktop/GitFolder/Info201-Final-Project")
runApp()
avg_means <- read.csv("data/seattle_apt_2015_2019.csv",
stringsAsFactors = FALSE)
# Creates new dataframe with a column for all month dates
avg_means2 <- avg_means %>%
gather(
key = months,
value = price,
-Bedroom_Size
)
avg_means2$months <- format(
as.Date(avg_means2$months, format = "X%Y.%d"), "%Y-%d")
#avg_means2 <- mutate(years = as.Date(avg_means2$months, format = "X%Y.%d"), "%Y")
# View(avg_means2)
# Return the first and last part of objects in the avg_means2 dataframe.
head(avg_means2)
setwd("~/Desktop/GitFolder/Info201-Final-Project")
setwd("~/Desktop/GitFolder/Info201-Final-Project")
library(ggplot2)
library(tidyr)
library(lubridate)
# Read the csv and store it under the name "avg_means"
avg_means <- read.csv("data/seattle_apt_2015_2019.csv",
stringsAsFactors = FALSE)
# Creates new dataframe with a column for all month dates
avg_means2 <- avg_means %>%
gather(
key = months,
value = price,
-Bedroom_Size
)
# Removes the "X" and converts the variable column into dates
avg_means2$months <- format(
as.Date(avg_means2$months, format = "X%Y.%d"), "%Y-%d")
#avg_means2 <- mutate(years = as.Date(avg_means2$months, format = "X%Y.%d"), "%Y")
# View(avg_means2)
# Return the first and last part of objects in the avg_means2 dataframe.
head(avg_means2)
# Creates a data plot.
ggplot() +
# Points are placed the prices of housing for each month, separated by the
# Bedroom Size.
geom_point(data = avg_means2,
aes(x = months, y = price, color = Bedroom_Size), group = 3
) +
# Turns the x-axis labels to 45 degrees so that it is readable
# This solution was taken from the second answer in this post:
# https://stackoverflow.com/questions/50399838/how-to-alternate-a-new-line
# -for-overlapping-x-axis-labels
theme(axis.text.x  = element_text(angle=45, hjust = 1)) +
ggtitle("Rental Listing Trend")
runApp()
runApp()
runApp()
setwd("~/Desktop/GitFolder/Info201-Final-Project")
setwd("~/Desktop/GitFolder/Info201-Final-Project")
runApp()
runApp('~/Desktop/GitFolder/save/finalProject')
runApp('~/Desktop/GitFolder/save/finalProject')
runApp('~/Desktop/GitFolder/save/finalProject')
runApp('201FP')
runApp('201FP')
setwd("~/Desktop/GitFolder/Info201-Final-Project/201FP")
runApp()
runApp('~/Desktop/GitFolder/Info201-Final-Project')
runApp('~/Desktop/GitFolder/Info201-Final-Project')
runApp('~/Desktop/GitFolder/Info201-Final-Project')
runApp('~/Desktop/GitFolder/Info201-Final-Project')
runApp('~/Desktop/GitFolder/Info201-Final-Project')
runApp('~/Desktop/GitFolder/Info201-Final-Project')
runApp('~/Desktop/GitFolder/Info201-Final-Project')
setwd("~/Desktop/GitFolder/Info201-Final-Project")
runApp()
>>>>>>> 2cccc61cd0e3770e320ac1a9b3706fa13cb8bbbc
